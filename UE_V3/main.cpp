/***
 * 
 *  read_tsv.h
 *  unary_encodingV2
 *  Created by MJ Asuncion on 11/19/22.
 * */
#include "Data_Point.h"
#include "unary_e.h"
#include <vector>
#include <iostream>

extern int CELL_COUNT;

int main()
{
    std::vector<Data_Point> user_location = read_tsv((char *)"test.txt");
    std::vector<Data_Point> est_user_location; //values generated by perturbed estimation
    VECTWODUB map = determine_map();
    std::vector<int> og_sum_of_choices(CELL_COUNT,0);
    std::vector<int> sum_of_choices(CELL_COUNT,0);
    std::vector<int> est_choices(CELL_COUNT,0);

    REP(i,user_location.size())
    {
        user_location.at(i).set_cell(map);
        user_location.at(i).encode_cell();
        user_location.at(i).perturbed_cell = user_location.at(i).original_cell;
        user_location.at(i).perturb_cell();
    }

    populate_sum(user_location,og_sum_of_choices);
    populate_perturbed_sum(user_location,sum_of_choices);

    //populate the estimated choices vect
    REP(i, sum_of_choices.size())
    {
        est_choices.at(i) = (int)estimate(sum_of_choices.at(i));
    }
    
    est_user_location = generate_est_map(est_choices, map);

    printf("Here is the tally of the unperturbed choices:\n");

    for(auto x:og_sum_of_choices)
    {
        std::cout << x << " ";
    }
    std::cout << std::endl;

    printf("Here is the tally of the perturbed choices:\n");
    for(auto x:sum_of_choices)
    {
        std::cout << x << " ";
    }
    std::cout << std::endl;

    printf("Here is the estimation of the choices:\n");
    for(auto i:est_choices)
    {
        std::cout << i << " ";
    }

    return 0;
}
